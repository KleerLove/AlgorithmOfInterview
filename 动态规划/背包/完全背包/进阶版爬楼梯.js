// 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
// 每次你可以爬至多m (1 <= m < n)个台阶。你有多少种不同的方法可以爬到楼顶呢？

// n 就是背包容量 1 - m 就是可以重复选择的物品, 本质上是一个完全背包问题
// 装满背包有几种方法, 和 LC377组合总和 Ⅳ 类似
// 顺序不同的序列被视作不同的组合，所以应该先遍历背包容量，再遍历物品

const climbStairs = (m, n) => {
    let dp = Array(n + 1).fill(0);
    // 初始化 dp[0] 为 1，表示站在第 0 阶有一种方法（即不移动）
    dp[0] = 1;

    for(let i = 0; i <= n; i++) {
        for(let j = 1; j <= m; j++) {
            if (i - j >= 0) {
                dp[i] += dp[i - j];
            }
        }
    }

    return dp[n];
};
